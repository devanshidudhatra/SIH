import joblib
import hashlib
import pandas as pd
import numpy as np

# Load pre-trained models
model = joblib.load('malware_model.joblib')
scaler = joblib.load('scaler.joblib')

def predict_malware(new_data_path):
    new_data = pd.read_csv(new_data_path)

    # Ensure the new data has the same features and scaling as training data
    new_data = new_data.drop(columns=['hash','classification'])  # Drop hash column before scaling
    scaled_new_data = scaler.transform(new_data)  # Scale the new data using the trained scaler
    
    # Perform predictions
    predictions = model.predict(scaled_new_data)
    predicted_classes = np.argmax(predictions, axis=1)

    # Add predictions to the new data
    new_data['Predicted_Label'] = ['Malware' if p == 1 else 'Benign' for p in predicted_classes]

    # Save or return the predictions
    new_data.to_csv('predicted_attacks.csv', index=False)
    return new_data

# Function to compute hash of file contents
def get_file_hash(file):
    hasher = hashlib.sha256()
    buf = file.read(8192)
    while buf:
        hasher.update(buf)
        buf = file.read(8192)
    return hasher.hexdigest()

# Function to predict malware based on file hash
def predict_from_hash(file_path, model, scaler):
    with open(file_path, 'rb') as f:
        file_hash = get_file_hash(f)

    # Example: converting hash to features for prediction (adjust as per your model)
    features = [int(file_hash[:8], 16)]  # Simplified example, needs proper feature extraction
    scaled_features = scaler.transform([features])
    prediction = model.predict(scaled_features)

    return 'Malware' if prediction[0] == 1 else 'Safe'

